name: 02 Biglinux Build ISO Testing
on:
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'With TMATE'
        required: false
        default: false
        
  #schedule:
    #- cron:  '0 4 * * 5'
    
  #repository_dispatch:
    #types:
      #- webhook
      #- '**'

jobs:
  prepare-release:
    runs-on: ubuntu-20.04
    steps:
      - id: time
        uses: nanzm/get-time-action@v1.1
        with:
          format: 'YYYY-MM-DD_HH-mm'
    outputs:
      release_tag: ${{ steps.time.outputs.time }}
      
  build-release:
    runs-on: ubuntu-20.04
    needs: [prepare-release]
    strategy:
      matrix:
        # EDITION: [kde,xivastudio]
        EDITION: [FalaQueEuTeEscuto]
        MANJAROBRANCH: [stable]
        BIGBRANCH: [testing]
        # EXTRAREPO: [testing]
        #KERNEL: [510, 515, 519]
        KERNEL: [atualLts]
        
    steps:
      - name: Build
        uses: BigLinux-Package-Build/build-iso@main
        with:
          edition: ${{ matrix.edition }}
          manjarobranch: ${{ matrix.manjarobranch }}
          bigbranch: ${{ matrix.bigbranch }}
          kernel: ${{ matrix.kernel }}
          extrarepo: ${{ matrix.extrarepo }}
          iso-profiles-repo: 'https://github.com/biglinux/iso-profiles'
          release-tag: ${{ needs.prepare-release.outputs.release_tag }}
          tmate: ${{ inputs.debug_enabled }}
          repo-mirror: ${{ secrets.REPO_MIRROR }}
          repo-dev: ${{ secrets.REPO_DEV }}
          
      # - name: Prepare Files to Upload
        # shell: bash
        # run: |
          # ls -lh
          # mkdir iso
          # for i in *.iso *.torrent *.pkgs *.md5; do
          # cp $i iso/
          # done
      
      #- name: Push to Repo
        #shell: bash
        #run: |
          #echo "## ssh setup"
          #mkdir -p /home/runner/.ssh
          #touch /home/runner/.ssh/github_actions
          #chmod 600 /home/runner/.ssh/github_actions
          #echo "${{ secrets.PKGBUILD_KEY }}" > /home/runner/.ssh/github_actions
          #eval `ssh-agent -s`
          #ssh-add /home/runner/.ssh/github_actions
          #ssh-keyscan -t rsa -p ${{ secrets.PKGBUILD_PORT }} ${{ secrets.PKGBUILD_HOST }} >> /home/runner/.ssh/known_hosts
          
          ##push files
          #for i in *.iso *.torrent *.pkgs *.md5; do
          #test -e $i && rsync -vaPpz -e "ssh -p ${{ secrets.PKGBUILD_PORT }}" $i ${{ secrets.PKGBUILD_USER }}@${{ secrets.PKGBUILD_HOST }}:${{ secrets.NIMBUS_DIR }}
          #done
          
      #- name: Push to SourceForge
        #shell: bash
        #run: |
          #echo "## ssh setup"
          #mkdir -p /home/runner/.ssh
          #touch /home/runner/.ssh/id_ed25519
          #chmod 600 /home/runner/.ssh/id_ed25519
          #echo "${{ secrets.XIVASTUDIO_SOURCEFORGE_KEY }}" >> /home/runner/.ssh/id_ed25519
          #ssh-keyscan -t ed25519 ${{ secrets.XIVASTUDIO_SOURCEFORGE_HOST }} >> /home/runner/.ssh/known_hosts
          
          ##push files
          ##SourceForge XIVAStudio
          #ssh xivastudio@shell.sourceforge.net create
          #rsync -CavzpP --progress --rsh=ssh iso/ ${{ secrets.XIVASTUDIO_SOURCEFORGE_USER }}@${{ secrets.XIVASTUDIO_SOURCEFORGE_HOST }}:${{ secrets.XIVASTUDIO_SOURCEFORGE_ISO_DIR_BIGLINUX }}
      
      
      # - name: Upload OSDN
        # shell: bash -O extglob {0}
        # run: |
          # mkdir -p /home/runner/.ssh
          # touch /home/runner/.ssh/id_rsa
          # chmod 600 /home/runner/.ssh/id_rsa
          # echo "${{ secrets.XIVASTUDIO_OSDN_KEY }}" > /home/runner/.ssh/id_rsa
          # ssh-keyscan -t rsa storage.osdn.net >> /home/runner/.ssh/known_hosts
          
          # rsync -CavzpP --progress iso/ ${{ secrets.XIVASTUDIO_OSDN_USER }}@${{ secrets.XIVASTUDIO_OSDN_HOST }}:${{ secrets.XIVASTUDIO_OSDN_DIR }}
          
      - name: Verify md5sum
        shell: bash
        run: |
          mkdir mnt
          find -type f -iname "*.iso" -exec sudo mount -o loop {} mnt \;
          pushd mnt/manjaro/x86_64/
            for i in *.md5; do 
              if [ "$(md5sum -c $i | cut -d " " -f2)" != "OK" ]; then
                echo "deu ruim no md5dum do arquivo $i"
                exit 1
              else
                echo "md5sum do arquivo $i estÃ¡ OK"
              fi
            done
          popd
          sudo umount mnt
      
      - name: upload-prepare
        shell: bash -O extglob {0}
        run: |
          echo "## ssh setup"
          mkdir -p /home/runner/.ssh
          touch /home/runner/.ssh/github_actions
          chmod 600 /home/runner/.ssh/github_actions
          # ssh-agent -a /tmp/ssh_agent.sock > /dev/null
          # echo "::set-output name=upload-files::./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent|.md5)"
          # mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
      
      - name: Publish Package on GitHub
        shell: bash
        run: |
          ls -lh
          release=$(find . -name *.iso | cut -d "/" -f2 | sed 's/.iso//')
          # iso is too big - creating a split-zip
          zip -j -0 -s 1950m ${release}.zip ${release}.iso
          ls -lh
          echo ${{ secrets.TOKEN_RELEASE }} | gh auth login --with-token
          gh release create ${release} --title ${release} --repo ${{ secrets.REPO_ISO_TESTING }} --notes "automated release from CI/CD" || echo "release already exists"
          for i in *.z* *.md5 *.pkgs; do 
            gh release upload ${release} --repo ${{ secrets.REPO_ISO_TESTING }} --clobber $i
          done
          
      - name: Upload Release_Tag
        shell: bash
        run: |
          echo "${{ secrets.SSH_UPLOAD }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          git clone git@github.com:BigLinux-Package-Build/big-releases.git
          cd big-releases
          echo ${{ needs.prepare-release.outputs.release_tag }} >> testing
          git add --all
          git config --local user.email "${{ secrets.GIT_USER }}@users.noreply.github.com"
          git config --local user.name "${{ secrets.GIT_USER }}"
          git commit -m "new release"
          git push
          
      # Tmate ##
      - name: Setup TMATE Session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
            
      - name: Telegram Alert Success
        shell: bash
        run: |
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "ðŸ’¿ ISO: ${{ github.workflow }} Criada com Sucesso.", "disable_notification": true}' ${{ secrets.MESSAGE_BOT_KEY }}
          
      - name: Telegram Alerta Fail
        if: ${{ failure() }}
        run: |
          #echo ${{ github.token }} | gh auth login --with-token
          #gh release delete ${{ needs.prepare-release.outputs.release_tag }} -y --repo ${{ github.repository }}
          
          curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "${{ secrets.CHAT_ID }}", "text": "Falha ao gerar ISO  ${{ github.workflow }} link https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}", "disable_notification": false, "disable_web_page_preview": true}' ${{ secrets.MESSAGE_BOT_KEY }}

      #- name: Prepare and Push to CDN77
        #shell: bash
        #run: |
          #ssh-keyscan -t ecdsa ${{ secrets.CDN77_HOST }} >> /home/runner/.ssh/known_hosts
          ##sshpass -p "${{ secrets.CDN77_KEY }}" rsync -Ccravzp --progress iso/ ${{ secrets.CDN77_USER }}@${{ secrets.CDN77_HOST }}:${{ secrets.CDN77_ISO_DIR }}
          ###--delete
