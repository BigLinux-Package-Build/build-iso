name: 'BigLinux Iso Action'
description: 'Installs prerequisites for building Manjaro on ubuntu'

inputs:
  iso-profiles-repo:
    description: 'iso profiles to clone'
    required: false
    default: 'https://github.com/biglinux/iso-profiles'
  edition:
    description: 'name of the iso profile to build'
    required: true
  manjarobranch:
    description: 'stable (default), testing, unstable'
    required: false
    default: stable
  bigbranch:
    description: 'stable, testing, development'
    required: true
  scope:
    description: 'full (default) or minimal image'
    required: false
    default: full
  kernel:
    description: 'kernel version'
    required: false
    default: 515
  extrarepo:
    description: 'extra repository to buld package'
    required: false
  release-tag:
    description: 'release tag to upload to (if set)'
    required: false
  build-mirror:
    description: 'specific build mirror to use'
    required: false
    default: https://forksystems.mm.fcix.net/manjaro
  mesa:
    description: 'alternative mesa'
    required: false
  tmate:
    description: 'run tmate'
    required: false
  repo-mirror:
    description: 'mirror to use in build'
    default: repo
    required: false
  repo-dev:
    description: 'developmente repository'
    required: false
  mirror_unstable:
    description: 'developmente mirror'
    required: false
  repo-man-testing:
    description: 'repository with packages build fron manjaro testing'
    required: false
    
outputs:
  file-path:
    description: "path of the generated iso"
    value: ${{ steps.image-build.outputs.file-path }}

runs:
  using: "composite"
  steps:
    - name: clean-system
      shell: bash
      run: |
        echo "### Clean System ###"
        sudo rm -rf \
        /imagegeneration \
        /opt/az \
        /opt/ghc \
        /opt/pipx \
        /opt/google \
        /opt/microsoft \
        /opt/hostedtoolcache \
        /usr/lib/llvm* \
        /var/lib/mysql \
        /var/lib/snapd \
        /var/lib/docker \
        /usr/lib/google* \
        /usr/lib/firefox \
        /usr/local/julia* \
        /usr/local/.ghcup \
        /usr/local/aws-cli \
        /usr/local/lib/android \
        /usr/local/aws-sam-cli \
        /usr/local/share/chromium \
        /usr/local/lib/node_modules \
        /usr/local/share/powershell \
        /usr/share/swift \
        /usr/share/dotnet
      
    - id: install-build-dependencie
      shell: bash
      run: |
        echo "### install-build-dependencies ###"
        sudo apt update
        # sudo apt dist-upgrade
        # sudo apt install \
        # sudo apt-fast dist-upgrade -y
        sudo apt-fast install -y \
          gdisk \
          zip \
          systemd-container \
          bmap-tools \
          asciidoc \
          libarchive-tools \
          git \
          build-essential \
          cmake \
          libarchive-dev \
          pkg-config \
          libcurl4-openssl-dev \
          libgpgme-dev \
          libssl-dev \
          fakeroot \
          dh-autoreconf \
          haveged \
          os-prober \
          kwalify \
          dosfstools \
          libisoburn1 \
          squashfs-tools \
          docbook2x \
          mktorrent \
          doxygen \
          zstd
        sudo python3 -m pip install meson
        sudo python3 -m pip install ninja
        
    - id: no-fsync
      shell: bash
      run: |
        sudo wget https://raw.githubusercontent.com/biglinux/disable-fsync/main/disable-fsync/usr/lib/disable-fsync.so -O /usr/lib/disable-fsync.so
        echo "/usr/lib/disable-fsync.so" | sudo tee -a /etc/ld.so.preload
        sudo ldconfig
        
    - id: install-pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.2
      run: |
        echo "### install-pacman ###"
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
          # sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/pacman/pacman-v${PACMAN_VERSION}.tar.gz
          # sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          sudo tar -xvzf pacman-v${PACMAN_VERSION}.tar.gz
          # pushd pacman-${PACMAN_VERSION}
          pushd pacman-v${PACMAN_VERSION}
            # sudo patch -p1 -i ../pacman-sync-first-option.patch
            sudo meson --prefix=/usr \
                      --buildtype=plain \
                      -Ddoc=disabled \
                      -Ddoxygen=enabled \
                      -Dscriptlet-shell=/usr/bin/bash \
                      -Dldconfig=/usr/bin/ldconfig \
                      build
            sudo meson compile -C build
            sudo meson install -C build
          popd
          sudo install -m644 pacman.conf /etc/pacman.conf
          sudo sed -i '/SyncFirst/d' /etc/pacman.conf
          sudo install -m644 makepkg.conf /etc/
          sudo mkdir -p /etc/pacman.d
          # sudo touch /etc/pacman.d/mirrorlist
          sudo wget https://raw.githubusercontent.com/BigLinux-Package-Build/manjaro-mirror/main/mirrorlist -O /etc/pacman.d/mirrorlist
        popd
        sudo rm -r pacman
        
    - id: install-keyrings
      shell: bash
      run: |
        echo "### install-keyrings ###"
        sudo install -dm755 /usr/share/pacman/keyrings/

        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        pushd manjaro-keyring
          sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 manjaro-revoked /usr/share/pacman/keyrings/
        popd
        sudo rm -r manjaro-keyring
        
        sudo git clone --depth 1 https://github.com/biglinux/biglinux-keyring.git
        pushd biglinux-keyring
          sudo install -m0644 biglinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
        popd
        sudo rm -r biglinux-keyring

        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd
        sudo rm -r archlinux-keyring
        
    - id: pull-keys
      shell: bash
      run: |
        echo "### pull-keys ###"
        sudo git clone https://github.com/biglinux/biglinux-key.git
        sudo install -dm755 /etc/pacman.d/gnupg/
        sudo install -m0644 biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
        sudo rm -r biglinux-key
        sudo pacman -Sy
        
    - id: install-arch-install-scripts
      shell: bash
      env:
        VERSION: "27"
      run: |
        echo "### install-arch-install-scripts ###"
        # sudo wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/arch-install-scripts/arch-install-scripts-${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        sudo tar -xvf arch-install-scripts.tar.gz
        sudo make -C arch-install-scripts-${VERSION}
        sudo make -C arch-install-scripts-${VERSION} check
        sudo make -C arch-install-scripts-${VERSION} PREFIX=/usr install
        
        #sudo wget https://gitlab.manjaro.org/applications/pacman-mirrors/-/raw/v4.19x-stable/conf/pacman-mirrors.conf -O /etc/pacman-mirrors.conf
        sudo touch /etc/pacman-mirrors.conf
        
        sudo rm arch-install-scripts.tar.gz
        sudo rm -r arch-install-scripts-${VERSION}
        
    - id: install-calamares-tools
      shell: bash
      run: |
        echo "### install-calamares-tools ###"
        sudo git clone --depth 1 https://gitlab.manjaro.org/applications/calamares-tools.git
        
        pushd calamares-tools
          sudo install -d /usr/share/calamares/
          sudo cp -rv schemas/ /usr/share/calamares/
        popd
        
        sudo rm -r calamares-tools
        
    - id: install-mkinitcpio
      shell: bash
      env:
        VERSION: "32"
      run: |
        echo "### install-mkinitcpio ###"
        # sudo wget https://gitlab.archlinux.org/mkinitcpio/mkinitcpio/-/archive/v${VERSION}/mkinitcpio-v${VERSION}.tar.gz
        sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/mkinitcpio/mkinitcpio-v${VERSION}.tar.gz
        sudo tar -xf mkinitcpio-v${VERSION}.tar.gz
        sudo make -C mkinitcpio-v${VERSION} install
        # sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/mkinitcpio/mkinitcpio-${VERSION}.tar.gz
        # sudo tar -xf mkinitcpio-${VERSION}.tar.gz
        # sudo make -C mkinitcpio-${VERSION} install
        sudo sed -i -e 's|File|Path|' /usr/share/libalpm/hooks/*hook
        
        sudo rm mkinitcpio-v${VERSION}.tar.gz
        sudo rm -r mkinitcpio-v${VERSION}
        
    - id: install-manjaro-tools
      shell: bash
      env:
        CUSTOM_REPO: ${{ inputs.custom-repo }}
        # COMMIT: b3efa6f6929bfc7fc62328b64ab4ebc0800111ce
      run: |
        echo "### install-manjaro-tools ###"
        #make majaro-tools
        sudo git clone https://gitlab.manjaro.org/tools/development-tools/manjaro-tools.git
        pushd manjaro-tools
          # sudo git checkout $COMMIT
          sudo make SYSCONFDIR=/etc PREFIX=/usr
          sudo make SYSCONFDIR=/etc PREFIX=/usr install_base
          sudo make SYSCONFDIR=/etc PREFIX=/usr install_yaml
          sudo make SYSCONFDIR=/etc PREFIX=/usr install_iso
        popd
        
        sudo rm -r manjaro-tools
        
        #add custom repo
        if [ ! -z ${CUSTOM_REPO} ]; then
          echo "## adding repo [${CUSTOM_REPO}]"
          sudo sed -i -e "s/\[core\]/\[${CUSTOM_REPO}\]\nSigLevel = PackageRequired\nInclude = \/etc\/pacman\.d\/mirrorlist\n\n\[core\]/" /usr/share/manjaro-tools/pacman-multilib.conf
        fi
        
        #change mirror
        # sudo sed -i "s|https://mirror.alpix.eu/manjaro|${{ inputs.build-mirror }}|" /lib/manjaro-tools/util.sh
        mirror=$(cat /etc/pacman.d/mirrorlist | head -n1 | awk '{print $3}' | sed -ne 's/\(manjaro\).*/\1/p')
        sudo sed -i "s|https://mirror.alpix.eu/manjaro|${mirror}|" /lib/manjaro-tools/util.sh
        sudo sed -i '/ParallelDownloads/s/#//' /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/ParallelDownloads/s/5/1/' /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/SyncFirst/d' /usr/share/manjaro-tools/pacman-multilib.conf
        
        #
        [ "$SCOPE" == "minimal" ] && unset SCOPE && unset OFFICE
        [ "$OFFICE" == "false" ] && unset OFFICE

        #source the version info from current release info
        source <(curl -s https://gitlab.manjaro.org/packages/core/manjaro-release/-/raw/master/lsb-release)
        sudo sed -i -e "s|dist_name=\$(get_distname)|dist_name=${DISTRIB_ID%Linux}|g" /usr/lib/manjaro-tools/util.sh
        sudo sed -i -e 's|iso_name=$(get_osid)|iso_name=manjaro|g' /usr/lib/manjaro-tools/util.sh
        sudo sed -i -e "s|dist_release=\$(get_release)|dist_release=${{ inputs.release-tag }}|g" /usr/lib/manjaro-tools/util.sh
        sudo sed -i -e "s|dist_codename=\$(get_codename)|dist_codename=\"${CODE_NAME:-$DISTRIB_CODENAME}\"|g" /usr/lib/manjaro-tools/util.sh
        
        sudo sed -i -e 's|dist_branding=.*|dist_branding="biglinux"|' /usr/lib/manjaro-tools/util.sh
        sudo sed -i 's|_${profile}${_edition}_${dist_release//.}|-live|' /usr/lib/manjaro-tools/util-iso.sh
        
        # #troca busca de kerneis para pegar qualquer kernel
        sudo sed -i '/_kernver=/s/_kernver=.*/_kernver=$(find $1\/usr\/lib\/modules\/ -type f -name version -exec cat {} +)/' /usr/lib/manjaro-tools/util-iso-boot.sh
        
        # #disable kernel version verification
        sudo sed -i '/${iso_kernel}/s/^/#/' /usr/lib/manjaro-tools/util-iso.sh
        
        # Remove last } in /usr/lib/manjaro-tools/util-iso-image.sh
        sudo sed -i ':a;$!{N;ba;};s/\(.*\)}/\1/' /usr/lib/manjaro-tools/util-iso-image.sh
        # adicionar ao arquivo /usr/lib/manjaro-tools/util-iso-image.sh
        echo '  #BigLinux clean
        path=$1/usr/share/doc
        if [[ -d $path ]]; then
          rm -Rf $path/* &> /dev/null
        fi

        #BigLinux clean
        path=$1/usr/share/man
        if [[ -d $path ]]; then
          rm -Rf $path/* &> /dev/null
        fi

        #Clean LibreOffice
        path=$1/usr/lib/libreoffice/share/config
        if [[ -d $path ]]; then
          rm -f $path/images_karasa_jaga* &> /dev/null
          rm -f $path/images_elementary* &> /dev/null
          rm -f $path/images_sukapura* &> /dev/null
          rm -f $path/images_colibre_svg.zip &> /dev/null
          rm -f $path/images_sifr_dark_svg.zip &> /dev/null
          rm -f $path/images_sifr_svg.zip &> /dev/null
          rm -f $path/images_breeze_dark_svg.zip &> /dev/null
          rm -f $path/images_breeze_svg.zip &> /dev/null
        fi

        #Clean LibreOffice
        path=$1/usr/share/wallpapers
        if [[ -d $path ]]; then
          rm -Rf $path/Altai
          rm -Rf $path/BytheWater
          rm -Rf $path/Cascade
          rm -Rf $path/ColdRipple
          rm -Rf $path/DarkestHour
          rm -Rf $path/EveningGlow
          rm -Rf $path/Flow
          rm -Rf $path/FlyingKonqui
          rm -Rf $path/IceCold
          rm -Rf $path/Kokkini
          rm -Rf $path/Next
          rm -Rf $path/Opal
          rm -Rf $path/Patak
          rm -Rf $path/SafeLanding
          rm -Rf $path/summer_1am
          rm -Rf $path/Autumn
          rm -Rf $path/Canopee
          rm -Rf $path/Cluster
          rm -Rf $path/ColorfulCups
          rm -Rf $path/Elarun
          rm -Rf $path/FallenLeaf
          rm -Rf $path/Fluent
          rm -Rf $path/Grey
          rm -Rf $path/Kite
          rm -Rf $path/MilkyWay
          rm -Rf $path/OneStandsOut
          rm -Rf $path/PastelHills
          rm -Rf $path/Path
          rm -Rf $path/Shell
          rm -Rf $path/Volna
        fi

        }' | sudo tee -a /usr/lib/manjaro-tools/util-iso-image.sh
        
        
        # Add root-overlay
        sudo sed -i '/copy_overlay "${profile_dir}\/root-overlay" "${path}"/a [[ -e ${profile_dir}\/root-overlay ]] && copy_overlay "${profile_dir}\/root-overlay" "${path}"' /usr/lib/manjaro-tools/util-iso.sh

        # plymouth
        # Add video modules to use plymouth in live mode
        # sudo sed -i "s|loop dm-snapshot|loop dm-snapshot amdgpu radeon i915 nouveau mgag200 bochs virtio-gpu qxl vmwgfx cirrus vmwgfx vboxvideo|g" /usr/share/manjaro-tools/mkinitcpio.conf

        # Enable plymouth and kms
        sudo sed -i "s|keyboard keymap|keyboard keymap kms plymouth|g" /usr/share/manjaro-tools/mkinitcpio.conf

        # Disable pxe boot
        #sudo sed -i "s|miso_pxe_common miso_pxe_http miso_pxe_nbd miso_pxe_nfs||g" /usr/share/manjaro-tools/mkinitcpio.conf

        #add big update repository
        #sudo sed -i '/SyncFirst/s/$/ biglinux-keyring/' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/SyncFirst/d' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
            
        sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        # sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/${{ inputs.repo-mirror }}.com.br\/update-stable\/$arch/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        
        # if [ "${{ inputs.manjarobranch }}" = "testing" ];then
        #   sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-${{ inputs.repo-man-testing }}\]/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        #   sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        #   sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/${{ inputs.repo-mirror }}.biglinux.com.br\/${{ inputs.repo-man-testing }}\/$arch/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        # fi
        
        if [ "${{ inputs.bigbranch }}" = "testing" ];then
        echo "
        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://${{ inputs.repo-mirror }}.biglinux.com.br/testing/"'$arch'"" | sudo tee -a /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        
        elif [ "${{ inputs.bigbranch }}" = "development" ];then
        echo '
        [bigiborg-'"${{ inputs.repo-dev }}"']
        SigLevel = PackageRequired
        Server = https://'"${{ inputs.mirror_unstable }}"'/$arch'"
        
        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://${{ inputs.repo-mirror }}.biglinux.com.br/testing/"'$arch'"" | sudo tee -a /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf

          echo "
        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://${{ inputs.repo-mirror }}.biglinux.com.br/stable/"'$arch'"" | sudo tee -a /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        fi
        
        sudo sed -i '/SyncFirst/d' /usr/share/manjaro-tools/pacman-default.conf /usr/share/manjaro-tools/pacman-multilib.conf
        
        # # Disable remove pkgs cache
        sudo sed -i 's|path=$1/var/lib/pacman/sync|path=$1/usr/share/man|'g /usr/lib/manjaro-tools/util-iso-image.sh
        
        # Faster compression
        if [ "${{ inputs.bigbranch }}" != "stable" ];then
          sudo sed -i 's|-Xcompression-level 20|-Xcompression-level 6|g' /usr/lib/manjaro-tools/util-iso.sh
          sudo sed -i 's|256K|1024K|g' /usr/lib/manjaro-tools/util-iso.sh
        else
          sudo sed -i 's|256K|1024K|g' /usr/lib/manjaro-tools/util-iso.sh
        fi
        
        #change iso-profiles directory
        # sudo sed -i 's/iso-profiles\/manjaro/iso-profiles\/biglinux/' /usr/lib/manjaro-tools/util.sh
        # sudo sed -i 's|&& \[\[ -d ${_workdir}/iso-profiles/community \]\]||' /usr/lib/manjaro-tools/util.sh
    
    - id: checkout-iso-profiles
      shell: bash
      env:
        REPO: ${{ inputs.iso-profiles-repo }}
        BRANCH: ${{ inputs.iso-profiles-branch }}
      run: sudo git clone ${BRANCH:+--branch ${BRANCH}} --depth 1 ${REPO} iso-profiles

    # Tmate ##
    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: "${{ inputs.tmate == 'true' }}"
      
    - id: image-build
      shell: bash
      env:
        EDITION: ${{ inputs.edition }}
        MANJAROBRANCH: ${{ inputs.manjarobranch }}
        BIGBRANCH: ${{ inputs.bigbranch }}
        SCOPE: ${{ inputs.scope }}
        # VERSION: ${{ inputs.version }}
        KERNEL: ${{ inputs.kernel }}
        OFFICE: ${{ inputs.office-chooser }}
        MESA: ${{ inputs.mesa }}
        EXTRAREPO: ${{ inputs.extrarepo }}
      run: |
        ## BigLinux Pre Config Build ISO
        echo "## BigLinux Pre Config Build ISO ##"
        
        #MESA
        # if [ "$KERNEL" = "oldLts" -a $EDITION != "xivastudio" ]; then
        #   echo '
        #   mesa-amber
        #   lib32-mesa-amber' | sudo tee -a iso-profiles/biglinux/$EDITION/Packages-Root
        if [ "$KERNEL" = "latest" -o "$KERNEL" = "xanmod" ]; then
          echo '
          mesa-tkg-stable
          lib32-mesa-tkg-stable' | sudo tee -a iso-profiles/biglinux/$EDITION/Packages-Root
          sudo sed -i '/libva-mesa/d'  iso-profiles/biglinux/$EDITION/Packages-Desktop
          sudo sed -i '/libva-mesa/d'  iso-profiles/biglinux/$EDITION/Packages-Mhwd
          sudo sed -i '/vulkan-swrast/d'  iso-profiles/biglinux/$EDITION/Packages-Desktop
        fi
        
        #KERNEL
        if [ "$KERNEL" = "oldLts" ];then
            oldLts=$(curl -s https://www.kernel.org/feeds/kdist.xml | grep ": longterm" | sed 's/^.*<title>//' | sed 's/<\/title>.*$//' | cut -d ":" -f1 | rev | cut -d "." -f2,3 | rev | head -n2 | sed 's/\.//g' | tail -n1)
            KERNEL=$oldLts
        elif [ "$KERNEL" = "atualLts" ];then
            atualLts=$(curl -s https://www.kernel.org/feeds/kdist.xml | grep ": longterm" | sed 's/^.*<title>//' | sed 's/<\/title>.*$//' | cut -d ":" -f1 | rev | cut -d "." -f2,3 | rev | head -n1 | sed 's/\.//g')
            KERNEL=$atualLts
        elif [ "$KERNEL" = "latest" ];then
          # kernelVer=62
          # kernelVer=$(pacman -Sl | grep linux[0-9] | grep core | grep -vE "rc|headers" | sort | tail -n1 | cut -d " " -f2 | sed 's/linux//')
          kernelVer=$(curl -s https://raw.githubusercontent.com/biglinux/linux-latest/stable/PKGBUILD | awk -F= '/kernelver=/{print $2}')
          echo "linux-latest"  | sudo tee -a iso-profiles/biglinux/$EDITION/Packages-Root
          KERNEL=$kernelVer
        elif [ -n "$(echo $KERNEL | grep xanmod)" ];then
          echo '
          linux-firmware' | sudo tee -a iso-profiles/biglinux/$EDITION/Packages-Root
          KERNEL=-${KERNEL}
        fi
        
        # Stable
        if [ "$BIGBRANCH" = "stable" ];then
          echo "BUILD_RELEASE=${{ inputs.release-tag }}" | sed -E 's/_[0-9]{2}-[0-9]{2}//' | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        fi
        
        # Testing
        if [ "$BIGBRANCH" = "testing" ];then
          #add repo testing
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/\[biglinux-testing\]/;p;x;}' iso-profiles/biglinux/$EDITION/user-repos.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/\[biglinux-testing\]/;p;x;}' iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/\[biglinux-testing\]/;p;x;}' iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' iso-profiles/biglinux/$EDITION/user-repos.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/testing\/$arch/;p;x;}' iso-profiles/biglinux/$EDITION/user-repos.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/testing\/$arch/;p;x;}' iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/testing\/$arch/;p;x;}' iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*//;p;x;}' iso-profiles/biglinux/$EDITION/user-repos.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*//;p;x;}' iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf
          sudo sed -i '/\[biglinux-stable\]/{h;s/.*//;p;x;}' iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
          echo "BUILD_RELEASE=${{ inputs.release-tag }}" | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        fi
        
        # Development
        if [ "$BIGBRANCH" = "development" ];then
          #add repo
        
          sudo sed -i '/\[biglinux-stable\]/,$d' iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf
          sudo sed -i '/\[biglinux-stable\]/,$d' iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
        echo "
        [bigiborg-${{ inputs.repo-dev }}]
        SigLevel = PackageRequired
        Server = https://${{ inputs.mirror_unstable }}"'/$arch'"

        [biglinux-testing]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/testing/"'$arch'"

        [biglinux-stable]
        SigLevel = PackageRequired
        Server = https://repo.biglinux.com.br/stable/"'$arch'"" | sudo tee -a iso-profiles/biglinux/$EDITION/live-overlay/etc/pacman.conf iso-profiles/biglinux/$EDITION/root-overlay/etc/pacman.conf
          
          #add anti-ruscher
          # echo anti-ruscher | sudo tee -a iso-profiles/biglinux/$EDITION/Packages-Root
          
          echo "BUILD_RELEASE=${{ inputs.release-tag }}" | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        fi
        
        #Build Release and Unix Time
        echo "BUILD_BRANCH=$BIGBRANCH" | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        echo "EDITION=$EDITION" | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        echo "UNIX_TIMESTAMP=$(( $(date +%s) / 86400 ))" | sudo tee -a iso-profiles/biglinux/$EDITION/root-overlay/etc/big-release
        
        #LABEL
        sudo sed -i "s/label=.*/label=biglinux_${{ inputs.release-tag }}.iso/" iso-profiles/biglinux/$EDITION/profile.conf
        
        
        sudo rm -r iso-profiles/biglinux-make-iso-profiles
        
        echo $KERNEL
        echo $EDITION
        echo $MANJAROBRANCH
        echo $BIGBRANCH
        echo $MESA

        sudo mkdir -p /var/lib/manjaro-tools/buildiso/kde/x86_64/bootfs/boot/
        sudo mkdir -p /var/lib/manjaro-tools/buildiso/FalaQueEuTeEscuto/x86_64/bootfs/boot/
        
        sudo buildiso ${SCOPE:+-f} -p $EDITION -b $MANJAROBRANCH -k linux${KERNEL} ${OFFICE:+-o}
        
        if [ -n "$(echo $KERNEL | grep xanmod)" ];then
            KERNEL=$(echo ${KERNEL} | sed 's/-//')
        fi
        
        sudo rm -Rf /var/lib/manjaro-tools/buildiso/*
        
        OUTPUT_ISO_PATH=$(find /var/cache/manjaro-tools/iso -type f -name "*.iso" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
        
        if [ "${EDITION}" = "xivastudio" ]; then
          name=xivastudio
        else
          name=biglinux
        fi
        
        #TARGET_ISO_PATH=$(basename $OUTPUT_ISO_PATH)
        if [ "${EDITION}" = "kde" -o "${EDITION}" = "xivastudio" ];then
          EDITION=
        else
          EDITION=_${EDITION}
        fi
        
        #Kernel Name
        if [ "$KERNEL" != "xanmod" ];then
          KERNEL=k${KERNEL}
        elif [ "$KERNEL" = "xanmod" ];then
          xanVer=$(grep linux-xanmod $(find /var/cache/manjaro-tools/iso -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}') | grep -v headers | cut -d " " -f2 | cut -d "-" -f1 | sed ':a;$!{N;ba;};s/\(.*\)\..*/\1/' | sed 's/\.//')
          KERNEL=$(echo ${KERNEL} | sed 's/-//')${xanVer}
        fi
            
        #renome ISO
        if [ "$MANJAROBRANCH" = "testing" ];then
          # TARGET_ISO_PATH=${EDITION}_DEVELOPMENT_${{ inputs.release-tag }}_k${KERNEL}.iso
          TARGET_ISO_PATH=${name}_DEVELOPMENT${EDITION}_ManTesting_${{ inputs.release-tag }}_${KERNEL}.iso
        elif [ "$BIGBRANCH" = "development" ];then
          # TARGET_ISO_PATH=${EDITION}_DEVELOPMENT_${{ inputs.release-tag }}_k${KERNEL}.iso
          TARGET_ISO_PATH=${name}_DEVELOPMENT${EDITION}_${{ inputs.release-tag }}_${KERNEL}.iso
        elif [ "$BIGBRANCH" = "beta" ];then
         # TARGET_ISO_PATH=${EDITION}_BETA_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_k${KERNEL}.iso
         TARGET_ISO_PATH=${name}_BETA${EDITION}_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_${KERNEL}.iso
        else
          # TARGET_ISO_PATH=${EDITION}_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_k${KERNEL}.iso
          TARGET_ISO_PATH=${name}${EDITION}_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_${KERNEL}.iso
        fi
        
        sudo mv $OUTPUT_ISO_PATH ./$TARGET_ISO_PATH
        # echo "::set-output name=file-path::$TARGET_ISO_PATH"
        echo "file-path=$TARGET_ISO_PATH" >> $GITHUB_OUTPUT
        
        FILE_PKG=$(find /var/cache/manjaro-tools/iso -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
        sudo mv $FILE_PKG ./${TARGET_ISO_PATH}.pkgs
        
        sudo rm -r iso-profiles
        
        ls -lh
        echo ${{ steps.image-build.outputs.file-path }}
        
    # # Tmate ##
    # - name: Setup TMATE Session
    #   uses: mxschmitt/action-tmate@v3
    #   if: "${{ inputs.tmate == 'true' }}"
        
    - id: hash
      shell: bash
      run: |
        echo "## calculating hashes"
        md5sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.md5
        
    - id: upload-prepare
      shell: bash -O extglob {0}
      run: |
        echo "## ssh setup"
        mkdir -p /home/runner/.ssh
        touch /home/runner/.ssh/github_actions
        chmod 600 /home/runner/.ssh/github_actions
        ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        # echo "::set-output name=upload-files::./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent|.md5)"
        echo "upload-files=./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent|.md5)" >> $GITHUB_OUTPUT
        
        mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
        
    - id: Torrent
      shell: bash -O extglob {0}
      env:
        EXTRAREPO: ${{ inputs.extrarepo }}
      run: |
        echo "### Torrent ###"
        if [ "${{ inputs.bigbranch }}" = "stable" ];then
          mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
          -w "https://iso.biglinux.com.br/${{ steps.image-build.outputs.file-path }}" \
          -w "https://osdn.net/projects/biglinux/storage/${{ steps.image-build.outputs.file-path }}" \
          -o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
        fi
    
    - id: upload-github-release
      shell: bash -O extglob {0}
      env:
        EXTRAREPO: ${{ inputs.extrarepo }}
      run: |
        echo "### upload-github-release ###"
        
        if [ "${{ inputs.bigbranch }}" = "stable" ];then
          echo "## github upload"
          release=$(echo ${{ steps.image-build.outputs.file-path }} | sed 's/_k.*//' | sed 's/_x.*//')

          echo ${{ github.token }} | gh auth login --with-token
          gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"

          GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}

          if [[ -z "$(du --threshold=1950M ${{ steps.image-build.outputs.file-path }})" ]]; then
            # iso is small enough to upload already
            gh release upload ${release} --repo ${{ github.repository }} --clobber \
              ${{ steps.upload-prepare.outputs.upload-files }}
          else
            # iso is too big - creating a split-zip
            zip -j -s 1950m ${{ steps.image-build.outputs.file-path }}.zip ${{ steps.image-build.outputs.file-path }}
            
            REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
            gh release upload ${release} --repo ${{ github.repository }} --clobber \
              ./${{ steps.image-build.outputs.file-path }}+(.z*|.sha*|.pkgs|.sig|.torrent|.md5)
          fi
        else
          echo "ISO testing subir em outro repo"
        fi
